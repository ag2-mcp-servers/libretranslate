# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:15:54+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import UploadFile
from starlette.requests import Request

from models import (
    Detections,
    ErrorResponse,
    ErrorSlowDown,
    FrontendSettings,
    Languages,
    SuggestResponse,
    Translate,
    TranslateFile,
)

app = MCPProxy(
    title='LibreTranslate',
    version='1.3.9',
    servers=[{'url': 'http://libretranslate.local'}],
)


@app.post('/detect', tags=['language_detection'])
def post_detect(request: Request):
    """
    Detect the language of a single text
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/frontend/settings', tags=['ui_frontend_settings'])
def get_frontend_settings():
    """
    Retrieve frontend specific settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/languages', tags=['language_detection'])
def get_languages():
    """
    Retrieve list of supported languages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/suggest', tags=['translation_management'])
def post_suggest(request: Request):
    """
    Submit a suggestion to improve a translation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/translate', tags=['translation_management'])
def post_translate(request: Request):
    """
    Translate text from a language to another
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/translate_file', tags=['translation_management'])
def post_translate_file(file: UploadFile):
    """
    Translate file from a language to another
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
